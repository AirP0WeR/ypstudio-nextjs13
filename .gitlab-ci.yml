docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  # services:
  #   - docker:dind
  before_script:
    - docker login  $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - echo TELEGRAM_TOKEN=$TELEGRAM_TOKEN >> .env
    - echo NEXT_PUBLIC_RECAPTCHA_SITE_KEY=$NEXT_PUBLIC_RECAPTCHA_SITE_KEY >> .env
    - echo RECAPTCHA_SECRET_KEY=$RECAPTCHA_SECRET_KEY >> .env
    - echo NEXT_PUBLIC_GA_MEASUREMENT_ID=$NEXT_PUBLIC_GA_MEASUREMENT_ID >> .env
    - echo MONGODB_URI=$MONGODB_URI >> .env
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
deploy-to-prod:
  stage: deploy
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PROD_SERVER_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - docker login  $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker-compose -H "ssh://$PROD_SERVER_USER@$PROD_SERVER_IP" pull
    - docker-compose -H "ssh://$PROD_SERVER_USER@$PROD_SERVER_IP" up -d